(program
  (let
    (rec)
    (datatypebind
      (datatype
        (tyvardecl List (fun (type) (type)))
        (tyvardecl a (type))
        Nil_match
        (vardecl Nil [ List a ])
        (vardecl Cons (fun a (fun [ List a ] [ List a ])))
      )
    )
    (let
      (nonrec)
      (datatypebind
        (datatype
          (tyvardecl Bool (type))

          Bool_match
          (vardecl True Bool) (vardecl False Bool)
        )
      )
      (datatypebind
        (datatype
          (tyvardecl Monoid (fun (type) (type)))
          (tyvardecl a (type))
          Monoid_match
          (vardecl
            CConsMonoid
            (fun [ (lam a (type) (fun a (fun a a))) a ] (fun a [ Monoid a ]))
          )
        )
      )
      (datatypebind
        (datatype
          (tyvardecl MultiplicativeMonoid (fun (type) (type)))
          (tyvardecl a (type))
          MultiplicativeMonoid_match
          (vardecl
            CConsMultiplicativeMonoid
            (fun
              [ (lam a (type) (fun a (fun a a))) a ]
              (fun a [ MultiplicativeMonoid a ])
            )
          )
        )
      )
      [
        [
          [
            {
              (let
                (nonrec)
                (typebind (tyvardecl m (type)) [ (lam a (type) a) Bool ])
                (abs
                  a
                  (type)
                  (lam
                    dMonoid
                    [ Monoid m ]
                    (lam
                      eta
                      (fun a m)
                      (let
                        (rec)
                        (termbind
                          (strict)
                          (vardecl go (fun [ List a ] m))
                          (lam
                            ds
                            [ List a ]
                            {
                              [
                                [
                                  { [ { Nil_match a } ds ] (all dead (type) m) }
                                  (abs
                                    dead
                                    (type)
                                    [
                                      { [ { Monoid_match m } dMonoid ] m }
                                      (lam
                                        v
                                        [ (lam a (type) (fun a (fun a a))) m ]
                                        (lam v m v)
                                      )
                                    ]
                                  )
                                ]
                                (lam
                                  x
                                  a
                                  (lam
                                    xs
                                    [ List a ]
                                    (abs
                                      dead
                                      (type)
                                      [
                                        [
                                          [
                                            {
                                              [ { Monoid_match m } dMonoid ]
                                              [
                                                (lam a (type) (fun a (fun a a)))
                                                m
                                              ]
                                            }
                                            (lam
                                              v
                                              [
                                                (lam a (type) (fun a (fun a a)))
                                                m
                                              ]
                                              (lam v m v)
                                            )
                                          ]
                                          [ eta x ]
                                        ]
                                        [ go xs ]
                                      ]
                                    )
                                  )
                                )
                              ]
                              (all dead (type) dead)
                            }
                          )
                        )
                        (lam eta [ List a ] [ go eta ])
                      )
                    )
                  )
                )
              )
              (con integer)
            }
            (let
              (nonrec)
              (termbind
                (strict)
                (vardecl v [ MultiplicativeMonoid Bool ])
                [
                  [
                    { CConsMultiplicativeMonoid Bool }
                    (lam
                      l
                      Bool
                      (lam
                        r
                        Bool
                        {
                          [
                            [
                              { [ Bool_match l ] (all dead (type) Bool) }
                              (abs dead (type) r)
                            ]
                            (abs dead (type) False)
                          ]
                          (all dead (type) dead)
                        }
                      )
                    )
                  ]
                  True
                ]
              )
              [
                [
                  { CConsMonoid [ (lam a (type) a) Bool ] }
                  (lam
                    eta
                    [ (lam a (type) a) Bool ]
                    (lam
                      eta
                      [ (lam a (type) a) Bool ]
                      [
                        [
                          [
                            {
                              [ { MultiplicativeMonoid_match Bool } v ]
                              [ (lam a (type) (fun a (fun a a))) Bool ]
                            }
                            (lam
                              v
                              [ (lam a (type) (fun a (fun a a))) Bool ]
                              (lam v Bool v)
                            )
                          ]
                          eta
                        ]
                        eta
                      ]
                    )
                  )
                ]
                [
                  { [ { MultiplicativeMonoid_match Bool } v ] Bool }
                  (lam
                    v [ (lam a (type) (fun a (fun a a))) Bool ] (lam v Bool v)
                  )
                ]
              ]
            )
          ]
          (lam
            v
            (con integer)
            [
              [
                [
                  { (builtin ifThenElse) Bool }
                  [ [ (builtin lessThanEqualsInteger) (con integer 1) ] v ]
                ]
                False
              ]
              True
            ]
          )
        ]
        { Nil (con integer) }
      ]
    )
  )
)